// @ts-nocheck
/* eslint-disable */
// --------------------------------------------------
// This file is auto-generated by Tuyau. Do not edit manually !
// --------------------------------------------------

import type { MakeTuyauRequest, MakeTuyauResponse } from '@tuyau/utils/types'
import type { InferInput } from '@vinejs/vine/types'

type AuthRegisterGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/auth/register_controller.ts').default['render'], false>
}
type AuthRegisterPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/auth.ts')['registerValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/auth/register_controller.ts').default['handle'], true>
}
type AuthLoginGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/auth/login_controller.ts').default['render'], false>
}
type AuthLoginPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/auth.ts')['loginValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/auth/login_controller.ts').default['handle'], true>
}
type AuthLogoutDelete = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/auth/logout_controller.ts').default['handle'], false>
}
type AuthForgotpasswordGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/auth/forgot_password_controller.ts').default['render'], false>
}
type AuthForgotpasswordPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/auth.ts')['passwordResetSendValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/auth/forgot_password_controller.ts').default['send'], true>
}
type AuthForgotpasswordResetIdGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/auth/forgot_password_controller.ts').default['reset'], false>
}
type AuthForgotpasswordResetPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/auth.ts')['passwordResetValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/auth/forgot_password_controller.ts').default['update'], true>
}
type RestaurantsCreateGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/restaurants/store_restaurant_controller.ts').default['render'], false>
}
type RestaurantsCreatePost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/restaurant.ts')['storeRestaurantValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/restaurants/store_restaurant_controller.ts').default['handle'], true>
}
type RestaurantsIdGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/restaurants/active_restaurant_controller.ts').default['handle'], false>
}
type RestaurantsIdPut = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/restaurant.ts')['updateRestaurantValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/settings/restaurant/update_restaurant_controller.ts').default['handle'], true>
}
type RestaurantsIdDelete = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/settings/restaurant/delete_restaurant_controller.ts').default['handle'], false>
}
type MenusGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/menus/store_menu_controller.ts').default['render'], false>
}
type MenusIdGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/menus/show_menu_controller.ts').default['render'], false>
}
type MenusPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/menu.ts')['menuValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/menus/store_menu_controller.ts').default['handle'], true>
}
type MenusOrderPut = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/menu.ts')['menuOrderValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/menus/update_menu_order_controller.ts').default['handle'], true>
}
type MenusIdPut = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/menu.ts')['menuValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/menus/update_menu_controller.ts').default['handle'], true>
}
type MenusIdDelete = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/menus/delete_menu_controller.ts').default['handle'], false>
}
type MenusIdCategoriesPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/category.ts')['categoryValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/categories/store_category_controller.ts').default['handle'], true>
}
type MenusIdCategoriesIdPut = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/category.ts')['categoryValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/categories/update_category_controller.ts').default['handle'], true>
}
type MenusIdCategoriesOrderPatch = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/category.ts')['categoryOrderValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/categories/update_category_order_controller.ts').default['handle'], true>
}
type MenusIdCategoriesIdDelete = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/categories/delete_category_controller.ts').default['handle'], false>
}
type ArticlesPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/article.ts')['articleValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/articles/store_article_controller.ts').default['handle'], true>
}
type ArticlesIdPut = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/article.ts')['articleValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/articles/update_article_controller.ts').default['handle'], true>
}
type ArticlesIdDelete = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/articles/delete_article_controller.ts').default['handle'], false>
}
type ArticlesIdImageDelete = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/articles/delete_article_image_controller.ts').default['handle'], false>
}
type MenusIdArticlesOrderPatch = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/article.ts')['articleOrderValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/articles/update_article_order_controller.ts').default['handle'], true>
}
type SettingsProfileGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/settings/profile/update_profile_controller.ts').default['render'], false>
}
type SettingsProfilePut = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/setting.ts')['updateProfileValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/settings/profile/update_profile_controller.ts').default['handle'], true>
}
type SettingsAccountGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/settings/accounts/update_account_controller.ts').default['render'], false>
}
type SettingsAccountEmailPut = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/setting.ts')['updateEmailValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/settings/accounts/update_account_controller.ts').default['handle'], true>
}
type SettingsAccountDelete = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/settings/accounts/delete_account_controller.ts').default['handle'], false>
}
type SettingsRestaurantGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/settings/restaurant/update_restaurant_controller.ts').default['render'], false>
}
type ApiV1GooglePlacesautocompletePost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/provider.ts')['placesAutocompleteValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/providers/google/places_autocomplete_controller.ts').default['apiHandle'], true>
}
type ApiV1AuthLoginPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/auth.ts')['loginValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/auth/login_controller.ts').default['apiHandle'], true>
}
type ApiV1AuthRegisterPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/auth.ts')['registerValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/auth/register_controller.ts').default['apiHandle'], true>
}
type ApiV1AuthLogoutDelete = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/auth/logout_controller.ts').default['apiHandle'], false>
}
export interface ApiDefinition {
  'auth': {
    'register': {
      '$url': {
      };
      '$get': AuthRegisterGetHead;
      '$head': AuthRegisterGetHead;
      '$post': AuthRegisterPost;
    };
    'login': {
      '$url': {
      };
      '$get': AuthLoginGetHead;
      '$head': AuthLoginGetHead;
      '$post': AuthLoginPost;
    };
    'logout': {
      '$url': {
      };
      '$delete': AuthLogoutDelete;
    };
    'forgot-password': {
      '$url': {
      };
      '$get': AuthForgotpasswordGetHead;
      '$head': AuthForgotpasswordGetHead;
      '$post': AuthForgotpasswordPost;
      'reset': {
        ':value': {
          '$url': {
          };
          '$get': AuthForgotpasswordResetIdGetHead;
          '$head': AuthForgotpasswordResetIdGetHead;
        };
        '$url': {
        };
        '$post': AuthForgotpasswordResetPost;
      };
    };
  };
  'restaurants': {
    'create': {
      '$url': {
      };
      '$get': RestaurantsCreateGetHead;
      '$head': RestaurantsCreateGetHead;
      '$post': RestaurantsCreatePost;
    };
    ':id': {
      '$url': {
      };
      '$get': RestaurantsIdGetHead;
      '$head': RestaurantsIdGetHead;
      '$put': RestaurantsIdPut;
      '$delete': RestaurantsIdDelete;
    };
  };
  'menus': {
    '$url': {
    };
    '$get': MenusGetHead;
    '$head': MenusGetHead;
    ':id': {
      '$url': {
      };
      '$get': MenusIdGetHead;
      '$head': MenusIdGetHead;
      '$put': MenusIdPut;
      '$delete': MenusIdDelete;
    };
    '$post': MenusPost;
    'order': {
      '$url': {
      };
      '$put': MenusOrderPut;
    };
    ':menuId': {
      'categories': {
        '$url': {
        };
        '$post': MenusIdCategoriesPost;
        ':categoryId': {
          '$url': {
          };
          '$put': MenusIdCategoriesIdPut;
          '$delete': MenusIdCategoriesIdDelete;
        };
        'order': {
          '$url': {
          };
          '$patch': MenusIdCategoriesOrderPatch;
        };
      };
      'articles': {
        'order': {
          '$url': {
          };
          '$patch': MenusIdArticlesOrderPatch;
        };
      };
    };
  };
  'articles': {
    '$url': {
    };
    '$post': ArticlesPost;
    ':id': {
      '$url': {
      };
      '$put': ArticlesIdPut;
      '$delete': ArticlesIdDelete;
      'image': {
        '$url': {
        };
        '$delete': ArticlesIdImageDelete;
      };
    };
  };
  'settings': {
    'profile': {
      '$url': {
      };
      '$get': SettingsProfileGetHead;
      '$head': SettingsProfileGetHead;
      '$put': SettingsProfilePut;
    };
    'account': {
      '$url': {
      };
      '$get': SettingsAccountGetHead;
      '$head': SettingsAccountGetHead;
      'email': {
        '$url': {
        };
        '$put': SettingsAccountEmailPut;
      };
      '$delete': SettingsAccountDelete;
    };
    'restaurant': {
      '$url': {
      };
      '$get': SettingsRestaurantGetHead;
      '$head': SettingsRestaurantGetHead;
    };
  };
  'api': {
    'v1': {
      'google': {
        'places-autocomplete': {
          '$url': {
          };
          '$post': ApiV1GooglePlacesautocompletePost;
        };
      };
      'auth': {
        'login': {
          '$url': {
          };
          '$post': ApiV1AuthLoginPost;
        };
        'register': {
          '$url': {
          };
          '$post': ApiV1AuthRegisterPost;
        };
        'logout': {
          '$url': {
          };
          '$delete': ApiV1AuthLogoutDelete;
        };
      };
    };
  };
}
const routes = [
  {
    params: [],
    name: 'auth.register.render',
    path: '/auth/register',
    method: ["GET","HEAD"],
    types: {} as AuthRegisterGetHead,
  },
  {
    params: [],
    name: 'auth.register.handle',
    path: '/auth/register',
    method: ["POST"],
    types: {} as AuthRegisterPost,
  },
  {
    params: [],
    name: 'auth.login.render',
    path: '/auth/login',
    method: ["GET","HEAD"],
    types: {} as AuthLoginGetHead,
  },
  {
    params: [],
    name: 'auth.login.handle',
    path: '/auth/login',
    method: ["POST"],
    types: {} as AuthLoginPost,
  },
  {
    params: [],
    name: 'auth.logout.handle',
    path: '/auth/logout',
    method: ["DELETE"],
    types: {} as AuthLogoutDelete,
  },
  {
    params: [],
    name: 'auth.forgot-password.render',
    path: '/auth/forgot-password',
    method: ["GET","HEAD"],
    types: {} as AuthForgotpasswordGetHead,
  },
  {
    params: [],
    name: 'auth.forgot-password.send',
    path: '/auth/forgot-password',
    method: ["POST"],
    types: {} as AuthForgotpasswordPost,
  },
  {
    params: ["value"],
    name: 'auth.forgot-password.reset',
    path: '/auth/forgot-password/reset/:value',
    method: ["GET","HEAD"],
    types: {} as AuthForgotpasswordResetIdGetHead,
  },
  {
    params: [],
    name: 'auth.forgot-password.update',
    path: '/auth/forgot-password/reset',
    method: ["POST"],
    types: {} as AuthForgotpasswordResetPost,
  },
  {
    params: [],
    name: 'restaurants.create.render',
    path: '/restaurants/create',
    method: ["GET","HEAD"],
    types: {} as RestaurantsCreateGetHead,
  },
  {
    params: [],
    name: 'restaurants.create.handle',
    path: '/restaurants/create',
    method: ["POST"],
    types: {} as RestaurantsCreatePost,
  },
  {
    params: ["id"],
    name: 'restaurants.active.handle',
    path: '/restaurants/:id',
    method: ["GET","HEAD"],
    types: {} as RestaurantsIdGetHead,
  },
  {
    params: ["id"],
    name: 'restaurants.update.handle',
    path: '/restaurants/:id',
    method: ["PUT"],
    types: {} as RestaurantsIdPut,
  },
  {
    params: ["id"],
    name: 'restaurants.delete.handle',
    path: '/restaurants/:id',
    method: ["DELETE"],
    types: {} as RestaurantsIdDelete,
  },
  {
    params: [],
    name: 'menus.store.render',
    path: '/menus',
    method: ["GET","HEAD"],
    types: {} as MenusGetHead,
  },
  {
    params: ["id"],
    name: 'menus.show.render',
    path: '/menus/:id',
    method: ["GET","HEAD"],
    types: {} as MenusIdGetHead,
  },
  {
    params: [],
    name: 'menus.store.handle',
    path: '/menus',
    method: ["POST"],
    types: {} as MenusPost,
  },
  {
    params: [],
    name: 'menus.order.handle',
    path: '/menus/order',
    method: ["PUT"],
    types: {} as MenusOrderPut,
  },
  {
    params: ["id"],
    name: 'menus.update.handle',
    path: '/menus/:id',
    method: ["PUT"],
    types: {} as MenusIdPut,
  },
  {
    params: ["id"],
    name: 'menus.delete.handle',
    path: '/menus/:id',
    method: ["DELETE"],
    types: {} as MenusIdDelete,
  },
  {
    params: ["menuId"],
    name: 'categories.store.handle',
    path: '/menus/:menuId/categories',
    method: ["POST"],
    types: {} as MenusIdCategoriesPost,
  },
  {
    params: ["menuId","categoryId"],
    name: 'categories.update.handle',
    path: '/menus/:menuId/categories/:categoryId',
    method: ["PUT"],
    types: {} as MenusIdCategoriesIdPut,
  },
  {
    params: ["menuId"],
    name: 'categories.order.handle',
    path: '/menus/:menuId/categories/order',
    method: ["PATCH"],
    types: {} as MenusIdCategoriesOrderPatch,
  },
  {
    params: ["menuId","categoryId"],
    name: 'categories.delete.handle',
    path: '/menus/:menuId/categories/:categoryId',
    method: ["DELETE"],
    types: {} as MenusIdCategoriesIdDelete,
  },
  {
    params: [],
    name: 'articles.store.handle',
    path: '/articles',
    method: ["POST"],
    types: {} as ArticlesPost,
  },
  {
    params: ["id"],
    name: 'articles.update.handle',
    path: '/articles/:id',
    method: ["PUT"],
    types: {} as ArticlesIdPut,
  },
  {
    params: ["id"],
    name: 'articles.delete.handle',
    path: '/articles/:id',
    method: ["DELETE"],
    types: {} as ArticlesIdDelete,
  },
  {
    params: ["id"],
    name: 'articles.delete.image.handle',
    path: '/articles/:id/image',
    method: ["DELETE"],
    types: {} as ArticlesIdImageDelete,
  },
  {
    params: ["menuId"],
    name: 'articles.order.handle',
    path: '/menus/:menuId/articles/order',
    method: ["PATCH"],
    types: {} as MenusIdArticlesOrderPatch,
  },
  {
    params: [],
    name: 'settings.profile.update.render',
    path: '/settings/profile',
    method: ["GET","HEAD"],
    types: {} as SettingsProfileGetHead,
  },
  {
    params: [],
    name: 'settings.profile.update.handle',
    path: '/settings/profile',
    method: ["PUT"],
    types: {} as SettingsProfilePut,
  },
  {
    params: [],
    name: 'settings.account.update.render',
    path: '/settings/account',
    method: ["GET","HEAD"],
    types: {} as SettingsAccountGetHead,
  },
  {
    params: [],
    name: 'settings.account.email.handle',
    path: '/settings/account/email',
    method: ["PUT"],
    types: {} as SettingsAccountEmailPut,
  },
  {
    params: [],
    name: 'settings.account.delete.handle',
    path: '/settings/account',
    method: ["DELETE"],
    types: {} as SettingsAccountDelete,
  },
  {
    params: [],
    name: 'settings.restaurant.update.render',
    path: '/settings/restaurant',
    method: ["GET","HEAD"],
    types: {} as SettingsRestaurantGetHead,
  },
  {
    params: [],
    name: 'api.google.autocomplete',
    path: '/api/v1/google/places-autocomplete',
    method: ["POST"],
    types: {} as ApiV1GooglePlacesautocompletePost,
  },
] as const;
export const api = {
  routes,
  definition: {} as ApiDefinition
}
