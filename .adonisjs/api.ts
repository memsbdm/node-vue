// @ts-nocheck
/* eslint-disable */
// --------------------------------------------------
// This file is auto-generated by Tuyau. Do not edit manually !
// --------------------------------------------------

import type { MakeTuyauRequest, MakeTuyauResponse } from '@tuyau/utils/types'
import type { InferInput } from '@vinejs/vine/types'

type AuthRegisterGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/auth/register_controller.ts').default['render'], false>
}
type AuthRegisterPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/auth.ts')['registerValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/auth/register_controller.ts').default['handle'], true>
}
type AuthLoginGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/auth/login_controller.ts').default['render'], false>
}
type AuthLoginPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/auth.ts')['loginValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/auth/login_controller.ts').default['handle'], true>
}
type AuthLogoutDelete = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/auth/logout_controller.ts').default['handle'], false>
}
type AuthForgotpasswordGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/auth/forgot_password_controller.ts').default['render'], false>
}
type AuthForgotpasswordPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/auth.ts')['passwordResetSendValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/auth/forgot_password_controller.ts').default['send'], true>
}
type AuthForgotpasswordResetIdGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/auth/forgot_password_controller.ts').default['reset'], false>
}
type AuthForgotpasswordResetPost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/auth.ts')['passwordResetValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/auth/forgot_password_controller.ts').default['update'], true>
}
type RestaurantsCreateGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/restaurants/store_restaurant_controller.ts').default['render'], false>
}
type RestaurantsCreatePost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/restaurant.ts')['storeRestaurantValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/restaurants/store_restaurant_controller.ts').default['handle'], true>
}
type RestaurantsIdGetHead = {
  request: unknown
  response: MakeTuyauResponse<import('../app/controllers/restaurants/active_restaurant_controller.ts').default['handle'], false>
}
type ApiV1GooglePlacesautocompletePost = {
  request: MakeTuyauRequest<InferInput<typeof import('../app/validators/provider.ts')['placesAutocompleteValidator']>>
  response: MakeTuyauResponse<import('../app/controllers/providers/google/places_autocomplete_controller.ts').default['handle'], true>
}
export interface ApiDefinition {
  'auth': {
    'register': {
      '$url': {
      };
      '$get': AuthRegisterGetHead;
      '$head': AuthRegisterGetHead;
      '$post': AuthRegisterPost;
    };
    'login': {
      '$url': {
      };
      '$get': AuthLoginGetHead;
      '$head': AuthLoginGetHead;
      '$post': AuthLoginPost;
    };
    'logout': {
      '$url': {
      };
      '$delete': AuthLogoutDelete;
    };
    'forgot-password': {
      '$url': {
      };
      '$get': AuthForgotpasswordGetHead;
      '$head': AuthForgotpasswordGetHead;
      '$post': AuthForgotpasswordPost;
      'reset': {
        ':value': {
          '$url': {
          };
          '$get': AuthForgotpasswordResetIdGetHead;
          '$head': AuthForgotpasswordResetIdGetHead;
        };
        '$url': {
        };
        '$post': AuthForgotpasswordResetPost;
      };
    };
  };
  'restaurants': {
    'create': {
      '$url': {
      };
      '$get': RestaurantsCreateGetHead;
      '$head': RestaurantsCreateGetHead;
      '$post': RestaurantsCreatePost;
    };
    ':id': {
      '$url': {
      };
      '$get': RestaurantsIdGetHead;
      '$head': RestaurantsIdGetHead;
    };
  };
  'api': {
    'v1': {
      'google': {
        'places-autocomplete': {
          '$url': {
          };
          '$post': ApiV1GooglePlacesautocompletePost;
        };
      };
    };
  };
}
const routes = [
  {
    params: [],
    name: 'auth.register.render',
    path: '/auth/register',
    method: ["GET","HEAD"],
    types: {} as AuthRegisterGetHead,
  },
  {
    params: [],
    name: 'auth.register.handle',
    path: '/auth/register',
    method: ["POST"],
    types: {} as AuthRegisterPost,
  },
  {
    params: [],
    name: 'auth.login.render',
    path: '/auth/login',
    method: ["GET","HEAD"],
    types: {} as AuthLoginGetHead,
  },
  {
    params: [],
    name: 'auth.login.handle',
    path: '/auth/login',
    method: ["POST"],
    types: {} as AuthLoginPost,
  },
  {
    params: [],
    name: 'auth.logout.handle',
    path: '/auth/logout',
    method: ["DELETE"],
    types: {} as AuthLogoutDelete,
  },
  {
    params: [],
    name: 'auth.forgot-password.render',
    path: '/auth/forgot-password',
    method: ["GET","HEAD"],
    types: {} as AuthForgotpasswordGetHead,
  },
  {
    params: [],
    name: 'auth.forgot-password.send',
    path: '/auth/forgot-password',
    method: ["POST"],
    types: {} as AuthForgotpasswordPost,
  },
  {
    params: ["value"],
    name: 'auth.forgot-password.reset',
    path: '/auth/forgot-password/reset/:value',
    method: ["GET","HEAD"],
    types: {} as AuthForgotpasswordResetIdGetHead,
  },
  {
    params: [],
    name: 'auth.forgot-password.update',
    path: '/auth/forgot-password/reset',
    method: ["POST"],
    types: {} as AuthForgotpasswordResetPost,
  },
  {
    params: [],
    name: 'restaurants.create.render',
    path: '/restaurants/create',
    method: ["GET","HEAD"],
    types: {} as RestaurantsCreateGetHead,
  },
  {
    params: [],
    name: 'restaurants.create.handle',
    path: '/restaurants/create',
    method: ["POST"],
    types: {} as RestaurantsCreatePost,
  },
  {
    params: ["id"],
    name: 'restaurants.active.handle',
    path: '/restaurants/:id',
    method: ["GET","HEAD"],
    types: {} as RestaurantsIdGetHead,
  },
  {
    params: [],
    name: 'api.google.autocomplete',
    path: '/api/v1/google/places-autocomplete',
    method: ["POST"],
    types: {} as ApiV1GooglePlacesautocompletePost,
  },
] as const;
export const api = {
  routes,
  definition: {} as ApiDefinition
}
